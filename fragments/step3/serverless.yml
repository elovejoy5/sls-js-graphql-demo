

service: hello-lambda # NOTE: update this with your service name


provider:
  name: aws
  runtime: nodejs8.10
  region: us-west-2
  profile: sbjs-demo



functions:
  hello:
    handler: handler.hello

resources:
  # Cognito
  - ${file(cognito-user-pool.yml)}

plugins:
   - serverless-appsync-plugin  

custom:
  appSync:
    name:  sbjs-demo-api
    # apiKey # only required for update-appsync/delete-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS
    # if AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
##      awsRegion: # defaults to provider region
      defaultAction: ALLOW # required # ALLOW or DENY
      userPoolId: us-west-2_nwDYnGR9h
##      appIdClientRegex: # optional
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
      level: ALL # Logging Level: NONE | ERROR | ALL
##    mappingTemplatesLocation: # defaults to mapping-templates
    mappingTemplates:
      - dataSource: get_greeting_resolver_ds
        type: Query
        field: getGreeting
        request: "get-greeting-request-mapping-template.vtl"
        response: "get-greeting-response-mapping-template.vtl"
##      - ${file({fileLocation}.yml)} # link to a file with arrays of mapping templates
##    schema: # schema file or array of files to merge, defaults to schema.graphql
    dataSources:
      - type: AWS_LAMBDA
        name: get_greeting_resolver_ds
        description: 'Lambda DataSource'
        config:
          functionName: hello # The function name in your serverless.yml. Ignored if lambdaFunctionArn is provided.
##          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] } # Where GraphqlLambdaFunction is the lambda function cloudformation resource created by serverless for the serverless function named graphql
##          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] } # Where AppSyncLambdaServiceRole is an IAM role defined in Resources
 ##         iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
##            - Effect: "Allow"
##              Action:
##                - "lambda:invokeFunction"
##              Resource:
##                - "arn:aws:lambda:{REGION}:{ACCOUNT_ID}:myFunction"
##                - "arn:aws:lambda:{REGION}:{ACCOUNT_ID}:myFunction:*"


# note: hoping that there's default permission stuff so I won't have to think about it...